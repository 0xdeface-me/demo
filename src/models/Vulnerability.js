import {observable, flow} from 'mobx';

class Vulnerability {
    @observable id = -1;
    @observable exploitable = 0x0;
    @observable hunter = 0x0;
    @observable damage = 0;
    @observable key = 0x0;
    @observable bounty = 0;
    @observable hash = "";
    @observable status = -1;

    async contract(web3) {
        const networkId = await web3.eth.net.getId();
        return new web3.eth.Contract(
            ZeroDay.abi, ZeroDay.networks[networkId].address
        );
    }

    fetch = flow(function * (web3, account, id) {
        this.state = "pending"; 

        const contract = yield this.contract(web3);

        try {
            const {
               exploitable,
               hunter,
               damage,
               key,
               bounty,
               hash,
               status
            } = yield contract.methods.vulns(id).call({from: account});
            this.id = id;
            this.exploitable = exploitable;
            this.hunter = hunter;
            this.damage = damage;
            this.key = key;
            this.bounty = bounty;
            this.hash = hash;
            this.status = status;

            this.state = "done";
        } catch(err) {
            console.log(err);
            this.state = "error";
        }
    });
}

export default Vulnerability;
