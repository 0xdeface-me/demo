import {observable, flow} from 'mobx';

import ZeroDay from "../../build/contracts/ZeroDay";

class Vulnerability {
    @observable id = 0;
    @observable exploitable = 0x0;
    @observable hunter = 0x0;

    @observable state = "pending";

    fetch = flow(function * (web3, account, id) {
        this.state = "pending"; 

        const networkId = yield web3.eth.net.getId();
        const contract = new web3.eth.Contract(
            ZeroDay.abi, ZeroDay.networks[networkId].address
        );
        try {
            const {
               exploitable,
               hunter,
               damage,
               key,
               bounty,
               hash,
               status
            } = yield contract.methods.vulns(id).call({from: account});
            this.id = id;
            this.exploitable = exploitable;
            this.hunter = hunter;
            // ...

            this.state = "done";
        } catch(err) {
            console.log(err);
            this.state = "error";
        }
    });

    commit = flow(function * (web3, account, exploitable, damage) {
        this.state = "pending";

        const networkId = yield web3.eth.net.getId();
        const contract = new web3.eth.Contract(
            ZeroDay.abi, ZeroDay.networks[networkId].address
        );

        try {
            yield contract.methods.commit(
                exploitable,
                damage
            ).send({from: account});

            this.state = "done";
        } catch(err) {
            console.log(err);
            this.state = "error";
        }
    });
}

export default Vulnerability;
