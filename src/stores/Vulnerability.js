import {observable, flow, computed} from 'mobx';
import BigNumber from "bignumber.js"

import ZeroDay from "../../build/contracts/ZeroDay";
import IExploitable from "../../build/contracts/IExploitable";

class Vulnerability {
    @observable id = -1;
    @observable exploitable = 0x0;
    @observable hunter = 0x0;
    @observable damage = 0;
    @observable key = 0x0;
    @observable bounty = 0;
    @observable hash = "";
    @observable status = -1;

    // Computed values
    @observable tmpbounty = 0;
    @observable address = 0x0;
    @observable privateKey = 0x0;

    async zeroDay(web3) {
        const networkId = await web3.eth.net.getId();
        return new web3.eth.Contract(
            ZeroDay.abi, ZeroDay.networks[networkId].address
        );
    }

    async exploitableContract(web3, address) {
        const networkId = await web3.eth.net.getId();
        return new web3.eth.Contract(
            IExploitable.abi, address
        );
    }

    fetch = flow(function * (web3, account, id) {
        this.state = "pending"; 

        const contract = yield this.zeroDay(web3);

        try {
            const {
               exploitable,
               hunter,
               damage,
               key,
               bounty,
               hash,
               status
            } = yield contract.methods.vulns(id).call({from: account});
            this.id = id;
            this.exploitable = exploitable;
            this.hunter = hunter;
            this.damage = damage;
            this.key = key;
            this.bounty = bounty;
            this.hash = hash;
            this.status = status;

            this.state = "done";
        } catch(err) {
            console.log(err);
            this.state = "error";
        }
    });

    compute = flow(function * (web3, account, id) {
        this.state = "pending";

        try {
            // TODO: Put these statements into separate try catch clauses
            yield this.fetch(web3, account, id);

            const exploitable = yield this.exploitableContract(
                web3,
                this.exploitable
            );
            
            const damage = new BigNumber(this.damage)
            const percentage = new BigNumber(
                yield exploitable.methods.percentageZeroDay()
                    .call({from: account })
            );
            const tmpbounty = damage.multipliedBy(percentage.dividedBy(100));
            this.tmpbounty = tmpbounty.toString();
            this.state = "done";
        } catch (err) {
            console.log(err);
            this.state = "error";
        }

        const { address, privateKey } = web3.eth.accounts.create();
        this.address = address;
        this.privateKey = privateKey;
    })

    pay = flow(function * (web3, account, id) {
        this.state = "pending";
        
        // NOTE: We're assuming Vulnerability's values have been set by now.
        const exploitable = yield this.exploitableContract(
            web3,
            this.exploitable
        )
        yield exploitable.methods.pay(id, this.address)
            .send({from: account });
    });
}

export default Vulnerability;
