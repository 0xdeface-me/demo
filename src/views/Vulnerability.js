// @format
import React, { Component } from "react";
import ReactDOM from "react-dom";
import { observer, inject } from "mobx-react";
import Highlight from "react-highlight";
import { Grid, Cell, Callout, Colors } from "react-foundation";
import styled from "styled-components";
import { Link } from "mobx-router";
import { FoldingCube } from "styled-spinkit";
import ReactTooltip from "react-tooltip";
import moment from "moment";

import { Button } from "../components";
import config from "../config";
import views from "../views";

import {
  shortenAddress,
  shortenBalance,
  statusToLabel
} from "../utils/helpers";

const HighlightWrapper = styled.div`
  overflow-y: scroll;
  height: 60vh;
  border-top: 1px solid #eeeeee;
  border-left: 1px solid #eeeeee;
  border-bottom: 1px solid #eeeeee;
`;

const LoaderWrapper = styled.div`
  background-color: white;
  display: flex;
  align-items: center;
  justify-content: center;
  border: 1px solid #eeeeee;
  height: 60vh;
  text-align: center;
  vertical-align: middle;
`;

const Ul = styled.ul`
  list-style: none;
  margin: 0;
`;

const Header = styled.li`
  background-color: #f8f8f8;
  padding: 5px;
  font-size: 1.1em;
  font-weight: bold;
  border-top-right-radius: 5px;
  border-top: 1px solid #eeeeee;
  border-right: 1px solid #eeeeee;
  text-align: center;
`;

const Li = styled.li`
  padding: 5px;
  border-right: 1px solid #eeeeee;
  border-top: 1px solid #eeeeee;
  background-color: white;
  width: 100%;
  text-align: center;
  &::before {
    content: "${props => props.content}";
  }
  &:last-child {
    border-bottom: 1px solid #eeeeee;
    border-bottom-right-radius: 5px;
  }
  &:nth-child(odd) {
    background-color: #f1f1f1;
  }
`;

const H1 = styled.h1`
  font-weight: bold;
  font-size: 2em;
`;

const HR = styled.div`
  border-top: 1px solid #e0e0e0;
  width: 100%;
  height: 1px;
  padding: 1em;
`;

const ButtonWrapper = styled.div`
  text-align: right;
`;

@inject("vulnerability", "router", "web3", "account")
@observer
class Vulnerability extends Component {
  constructor(props) {
    super(props);

    this.onTimeout = this.onTimeout.bind(this);
  }

  async componentDidMount() {
    const { vulnerability, router, web3, account } = this.props;
    const id = router.params.id;
    await vulnerability.fetch(web3, account, id);
    await vulnerability.loadCode();
  }

  async onTimeout() {
    const { vulnerability, router, web3, account } = this.props;
    const id = router.params.id;
    await vulnerability.decide(web3, account, id, false, "");
  }

  render() {
    const { vulnerability, web3, router } = this.props;

    return (
      <div>
        <Grid>
          <Cell large={2} />
          <Cell large={8}>
            <Grid>
              <Cell large={6}>
                <H1>Vulnerability #{vulnerability.id}</H1>
              </Cell>
              <Cell large={6}>
                <ButtonWrapper>
                  {vulnerability.status === 0 ? (
                    <Link
                      view={views.pay}
                      params={{ id: vulnerability.id }}
                      store={{ router }}
                    >
                      <Button bgColor={config.CSS.PAID} color="white">
                        Pay
                      </Button>
                    </Link>
                  ) : null}
                  {vulnerability.status === 1 ? (
                    <Link
                      view={views.reveal}
                      params={{ id: vulnerability.id }}
                      store={{ router }}
                    >
                      <Button bgColor={config.CSS.REVEALED} color="white">
                        Reveal
                      </Button>
                    </Link>
                  ) : null}
                  {vulnerability.status === 2 ? (
                    <Link
                      view={views.decide}
                      params={{ id: vulnerability.id }}
                      store={{ router }}
                    >
                      <Button bgColor={config.CSS.EXITED} color="white">
                        Decide
                      </Button>
                    </Link>
                  ) : null}
                  {vulnerability.timedout && vulnerability.status !== 5 ? (
                    <Button
                      onClick={this.onTimeout}
                      bgColor={config.CSS.TIMEOUT}
                      color="white"
                    >
                      Reclaim (timed-out)
                    </Button>
                  ) : null}
                </ButtonWrapper>
              </Cell>
            </Grid>
            <HR />
            {vulnerability.status > 2 ? (
              <Callout>
                <h5>
                  This vulnerability{" "}
                  {vulnerability.status === 3 ? "was accepted." : ""}{" "}
                  {vulnerability.status === 4 ? "was declined." : ""}
                  {vulnerability.status === 5 ? "timed-out." : ""}
                </h5>
                <p>
                  {vulnerability.status === 3
                    ? "The contract was exited. A bounty was paid out to the attacker and funds were sent back to the contract users. The operator gave the following reasons for shutting down the contract:"
                    : ""}{" "}
                  {vulnerability.status === 4
                    ? "The contract is still running with all its funds on the network. No bounty was paid out. The operator gave the following reason for declining the report:"
                    : ""}
                  {vulnerability.status === 5
                    ? "The attacker didn't submit the report in a timely maner. This lead the operator to reclaim their bounty. Their contract is hence still running. Their reasoning was:"
                    : ""}
                  .
                </p>
                <p>{vulnerability.reason}</p>
              </Callout>
            ) : null}
          </Cell>
          <Cell large={2} />
        </Grid>
        <Grid>
          <Cell large={2} />
          <Cell large={6}>
            {vulnerability.state === "pending" ? (
              <LoaderWrapper>
                <div>
                  <FoldingCube />
                  <p>Loading contract code from Etherscan.io...</p>
                </div>
              </LoaderWrapper>
            ) : null}

            {vulnerability.state === "done" && vulnerability.code !== "" ? (
              <HighlightWrapper>
                <Highlight className="Solidity">{vulnerability.code}</Highlight>
              </HighlightWrapper>
            ) : null}
            {(vulnerability.state === "done" && vulnerability.code === "") ||
            vulnerability.state === "error" ? (
              <LoaderWrapper>No contract code was found :(</LoaderWrapper>
            ) : null}
          </Cell>
          <Cell large={2}>
            <Ul>
              <Header>Properties</Header>
              <Li>
                <Grid>
                  <Cell large={4}>ID</Cell>
                  <Cell large={8}>{vulnerability.id}</Cell>
                </Grid>
              </Li>
              <Li>
                <Grid>
                  <Cell large={4}>Status</Cell>
                  <Cell large={8}>{statusToLabel(vulnerability.status)}</Cell>
                </Grid>
              </Li>
              <Li>
                <Grid>
                  <Cell large={4}>Contract</Cell>
                  <Cell large={8}>
                    <a
                      data-tip={vulnerability.exploitable}
                      href={
                        config.TARGET_NETWORK !== "mainnet"
                          ? "https://" +
                            config.TARGET_NETWORK +
                            ".etherscan.io/address/" +
                            vulnerability.exploitable
                          : "https://etherscan.io/address/" +
                            vulnerability.exploitable
                      }
                      target="_blank"
                    >
                      {shortenAddress(vulnerability.exploitable)}
                    </a>
                    <ReactTooltip place="top" type="dark" effect="solid" />
                  </Cell>
                </Grid>
              </Li>
              <Li>
                <Grid>
                  <Cell large={4}>Attacker</Cell>
                  <Cell large={8}>
                    <a
                      data-tip={vulnerability.attacker}
                      href={
                        config.TARGET_NETWORK !== "mainnet"
                          ? "https://" +
                            config.TARGET_NETWORK +
                            ".etherscan.io/address/" +
                            vulnerability.attacker
                          : "https://etherscan.io/address/" +
                            vulnerability.attacker
                      }
                      target="_blank"
                    >
                      {shortenAddress(vulnerability.attacker)}
                    </a>
                    <ReactTooltip place="top" type="dark" effect="solid" />
                  </Cell>
                </Grid>
              </Li>
              <Li>
                <Grid>
                  <Cell large={4}>Bounty</Cell>
                  <Cell large={8}>
                    <span data-tip={web3.utils.fromWei(vulnerability.bounty)}>
                      {shortenBalance(
                        web3.utils.fromWei(vulnerability.bounty)
                      ) + " ETH"}
                    </span>
                    <ReactTooltip place="top" type="dark" effect="solid" />
                  </Cell>
                </Grid>
              </Li>
              <Li>
                <Grid>
                  <Cell large={4}>Balance</Cell>
                  <Cell large={8}>
                    <span data-tip={web3.utils.fromWei(vulnerability.balance)}>
                      {shortenBalance(
                        web3.utils.fromWei(vulnerability.balance)
                      ) + " ETH"}
                    </span>
                    <ReactTooltip place="top" type="dark" effect="solid" />
                  </Cell>
                </Grid>
              </Li>
              {vulnerability.key ? (
                <Li>
                  <Grid>
                    <Cell large={4}>Public Key</Cell>
                    <Cell large={8}>
                      <span data-tip={vulnerability.key}>
                        {shortenAddress(vulnerability.key)}
                      </span>
                      <ReactTooltip place="top" type="dark" effect="solid" />
                    </Cell>
                  </Grid>
                </Li>
              ) : null}
              {vulnerability.encrypted ? (
                <Li>
                  <Grid>
                    <Cell large={4}>Report (encrypted) </Cell>
                    <Cell large={8}>
                      <a
                        href={
                          "https://" +
                          config.IPFS_PROVIDER +
                          "/ipfs/" +
                          vulnerability.encrypted
                        }
                        target="_blank"
                        data-tip={vulnerability.encrypted}
                      >
                        {shortenAddress(vulnerability.encrypted)}
                      </a>
                      <ReactTooltip place="top" type="dark" effect="solid" />
                    </Cell>
                  </Grid>
                </Li>
              ) : null}
              {vulnerability.plain ? (
                <Li>
                  <Grid>
                    <Cell large={4}>Report (plain) </Cell>
                    <Cell large={8}>
                      <span data-tip={vulnerability.plain}>
                        {shortenAddress(vulnerability.plain)}
                      </span>
                      <ReactTooltip place="top" type="dark" effect="solid" />
                    </Cell>
                  </Grid>
                </Li>
              ) : null}
              {vulnerability.status > 0 ? (
                <Li>
                  <Grid>
                    <Cell large={4}>Paid at</Cell>
                    <Cell large={8}>
                      <span>
                        {moment
                          .unix(vulnerability.paidAt)
                          .format("MMMM Do YYYY, h:mm:ss a")}
                      </span>
                      <ReactTooltip place="top" type="dark" effect="solid" />
                    </Cell>
                  </Grid>
                </Li>
              ) : null}
              {vulnerability.status > 0 ? (
                <Li>
                  <Grid>
                    <Cell large={4}>Timeout</Cell>
                    <Cell large={8}>
                      <span>
                        {moment
                          .unix(vulnerability.paidAt + vulnerability.timeout)
                          .format("MMMM Do YYYY, h:mm:ss a")}
                      </span>
                      <ReactTooltip place="top" type="dark" effect="solid" />
                    </Cell>
                  </Grid>
                </Li>
              ) : null}
            </Ul>
          </Cell>
          <Cell large={2} />
        </Grid>
      </div>
    );
  }
}

export default Vulnerability;
